import de.hamster.debugger.model.Territorium;import de.hamster.debugger.model.Territory;import de.hamster.model.HamsterException;import de.hamster.model.HamsterInitialisierungsException;import de.hamster.model.HamsterNichtInitialisiertException;import de.hamster.model.KachelLeerException;import de.hamster.model.MauerDaException;import de.hamster.model.MaulLeerException;import de.hamster.model.MouthEmptyException;import de.hamster.model.WallInFrontException;import de.hamster.model.TileEmptyException;public class A01_Stern_Martin_Jindra extends de.hamster.debugger.model.IHamster implements de.hamster.model.HamsterProgram {public void main() {
    gib();
    vor();
    vor();
    vor();
    vor();
    vor();
    gib();
    vor();
    vor();
    vor();
    vor();
    vor();
    gib();
    linksUm();
    linksUm();
    linksUm();
    vor();
    linksUm();
    linksUm();
    linksUm();
    vor();
    gib();
    vor();
    vor();
    vor();
    vor();
    gib();
    vor();
    vor();
    vor();
    vor();
    gib();
    vor();
    linksUm();
    vor();
    linksUm();
	vor();
	vor();
	gib();
    vor();
	vor();
	vor();
	gib();
	vor();
	vor();
	vor();
	gib();
	while(vornFrei()==true)	{
    	vor();
    }
    linksUm();
    linksUm();
    linksUm();
    vor();
    linksUm();
    linksUm();
    linksUm();
    vor();
    vor();
    vor();
    gib();
    vor();
    vor();
    gib();
    vor();
    vor();
    gib();
	while(vornFrei()==true)	{
    	vor();
    }
    linksUm();
    vor();
    linksUm();
    vor();
    vor();
    vor();
    vor();
    gib();
    vor();
    vor();
    gib();
	while(vornFrei()==true)	{
    	vor();
    }
    linksUm();
    linksUm();
    linksUm();
    vor();
    linksUm();
    linksUm();
    linksUm();
    gib();
    vor();
    gib();
	vor();
    gib();
	vor();
    gib();
    vor();
    vor();
    gib();
    vor();
    vor();
    gib();
    vor();
    gib();
    vor();
    gib();
	vor();
	gib();
    linksUm();
    vor();
    linksUm();
    vor();
    vor();
    vor();
	vor();
	gib();
	vor();
	vor();
	gib();
	while(vornFrei()==true)	{
    	vor();
    }
	linksUm();
    linksUm();
    linksUm();
    vor();
    linksUm();
    linksUm();
    linksUm();
    vor();
    vor();
    vor();
    gib();
    vor();
    vor();
    gib();
    vor();
    vor();
    gib();
   	while(vornFrei()==true)	{
    	vor();
    }
    linksUm();
    vor();
    linksUm();
    vor();
    vor();
    gib();
    vor();
    vor();
    vor();
    gib();
    vor();
    vor();
    vor();
    gib();
    while(vornFrei()==true)	{
    	vor();
    }
	linksUm();
    linksUm();
    linksUm();
    vor();
    linksUm();
    linksUm();
    linksUm();
    vor();
    gib();
    vor();
    vor();
    vor();
    vor();
    gib();
    vor();
    vor();
    vor();
    vor();
    gib();
    vor();
    linksUm();
    vor();
    linksUm();
    gib();
    vor();
    vor();
    vor();
    vor();
    vor();
    gib();
    vor();
    vor();
    vor();
    vor();
    vor();
    gib();
}
}